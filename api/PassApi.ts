/**
 * Demo Client for Passmeister Apple Wallet and Google Wallet API
 * [www.passmeister.com](https://www.passmeister.com).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class PassApi {
    protected basePath = 'https://localhost';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     * @summary This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness)
     * @param passId id of the pass (provided by you when creating the pass or automatically set by passmeister)
     */
    public createOrUpdatePass (passTypeId: any, passId?: any, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/pass';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'passTypeId' is not null or undefined
        if (passTypeId === null || passTypeId === undefined) {
            throw new Error('Required parameter passTypeId was null or undefined when calling createOrUpdatePass.');
        }

        if (passTypeId !== undefined) {
            queryParameters['passTypeId'] = passTypeId;
        }

        if (passId !== undefined) {
            queryParameters['passId'] = passId;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Delete pass by pass id.
     * @summary Delete pass by pass id.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness)
     * @param passId id of the pass
     */
    public deletePass (passTypeId: any, passId: any, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/pass';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'passTypeId' is not null or undefined
        if (passTypeId === null || passTypeId === undefined) {
            throw new Error('Required parameter passTypeId was null or undefined when calling deletePass.');
        }

        // verify required parameter 'passId' is not null or undefined
        if (passId === null || passId === undefined) {
            throw new Error('Required parameter passId was null or undefined when calling deletePass.');
        }

        if (passTypeId !== undefined) {
            queryParameters['passTypeId'] = passTypeId;
        }

        if (passId !== undefined) {
            queryParameters['passId'] = passId;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Get pass information by pass id.
     * @summary Get pass information by pass id.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness)
     * @param passId id of the pass
     */
    public getPass (passTypeId: any, passId: any, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/pass';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'passTypeId' is not null or undefined
        if (passTypeId === null || passTypeId === undefined) {
            throw new Error('Required parameter passTypeId was null or undefined when calling getPass.');
        }

        // verify required parameter 'passId' is not null or undefined
        if (passId === null || passId === undefined) {
            throw new Error('Required parameter passId was null or undefined when calling getPass.');
        }

        if (passTypeId !== undefined) {
            queryParameters['passTypeId'] = passTypeId;
        }

        if (passId !== undefined) {
            queryParameters['passId'] = passId;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Retrieve the list of active pass ids for a given pass type.
     * @summary Retrieve the list of active pass ids for a given pass type.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness)
     * @param page 
     * @param limit 
     */
    public passList (passTypeId: any, page?: any, limit?: any, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/pass/list';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'passTypeId' is not null or undefined
        if (passTypeId === null || passTypeId === undefined) {
            throw new Error('Required parameter passTypeId was null or undefined when calling passList.');
        }

        if (passTypeId !== undefined) {
            queryParameters['passTypeId'] = passTypeId;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
     * @summary Send updates to all active passes for a given pass type.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness)
     */
    public passSync (passTypeId: any, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/pass/sync';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'passTypeId' is not null or undefined
        if (passTypeId === null || passTypeId === undefined) {
            throw new Error('Required parameter passTypeId was null or undefined when calling passSync.');
        }

        if (passTypeId !== undefined) {
            queryParameters['passTypeId'] = passTypeId;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
